class Solution {
    TreeNode first, second,prev;
    public void recoverTree(TreeNode root) {
        first=second=null;
        prev=new TreeNode(Integer.MIN_VALUE);
        
        inorder(root);
        
        int temp=first.val;
        first.val=second.val;
        second.val=temp;
        
    }
    public void inorder(TreeNode root){
        if(root==null) return ;
        inorder(root.left);
        // work
        if(first==null && prev.val>root.val){
            first=prev;
        }
        // sath sath second update krna hai 
        // dono case adjacent and dur wala second swap
        // so else nhi lagaunga  just if 
        if(first!=null && prev.val>root.val){
            second =root;
        }
        prev=root;// agla ka prev abhi ka root hoga
        
        inorder(root.right);
    }
}

// Time : o(n) 
// Space : O(H) recursive space 
// can be saved using morris traversal 