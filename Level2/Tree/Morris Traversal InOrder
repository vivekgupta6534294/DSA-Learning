class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
         List<Integer> ans = new ArrayList<>();
        
        while(root != null){
            if(root.left == null){ // root can be visited only once
                ans.add(root.val);
                root = root.right;
            }else{ //root -> first vis or second vis
                TreeNode rootp1 = root.left;
                while(rootp1.right != null && rootp1.right != root){
                    rootp1 = rootp1.right;
                }
                
                if(rootp1.right == null){ // first vis
                    rootp1.right = root; // connect
                    root = root.left;
                }else if(rootp1.right == root){ // second vis
                    ans.add(root.val);// InOrder mai se second visit mai add hota h
                    rootp1.right = null; // disconnect
                    root = root.right;
                }
            }
        }
        return ans;
    }
}

Time : O(n)
Space : o(1)