
class Solution {
    int preIdx;
    HashMap<Integer,Integer> map;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        preIdx = 0;
        map = new HashMap<>();
        for(int i = 0 ; i < inorder.length ; i++){
            int vl = inorder[i];
            map.put(vl,i);
        }
        return preOrderTraversal(preorder,0,preorder.length-1);
    }
    public TreeNode preOrderTraversal(int[] preorder,int left,int right){
        if(left > right) return null;
        
        int rval = preorder[preIdx++];
        TreeNode root = new TreeNode(rval);
        int idx = map.get(rval); // O(1)
        
        root.left = preOrderTraversal(preorder,left,idx-1);
        root.right = preOrderTraversal(preorder,idx+1,right);
        return root;
    }
//     public int findInInorder(int[] inorder,int left,int right,int val){
//         while(left <= right){
//             if(inorder[left] == val) return left;
//             left++;
//         }
//         return -1;
//     }
//     public TreeNode preOrderTraversal(int[] preorder,int[] inorder,int left,int right){
//         if(left > right) return null;
        
//         int rval = preorder[preIdx++];
//         TreeNode root = new TreeNode(rval);
//         int idx = findInInorder(inorder,left,right,rval); // O(n)
        
//         root.left = preOrderTraversal(preorder,inorder,left,idx-1);
//         root.right = preOrderTraversal(preorder,inorder,idx+1,right);
//         return root;
//     }
}

//T: o(n) 
//Space o(n) hashmap + o(n) recursive stack