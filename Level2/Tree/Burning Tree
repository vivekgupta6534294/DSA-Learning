
class Solution
{
    /*class Node {
    	int data;
    	Node left;
    	Node right;
    
    	Node(int data) {
    		this.data = data;
    		left = null;
    		right = null;
    	}
    }*/
    
    public static ArrayList<Node> ntrp(Node root, int target){
        if(root==null) return new ArrayList<>();
        if(root.data==target){
            ArrayList<Node> ans=new ArrayList<>();
            ans.add(root);
            return ans;
        }
        ArrayList<Node> left=ntrp(root.left,target);
        if(left.size()>0) {
            left.add(root);
            return left;
        }
        ArrayList<Node> right=ntrp(root.right,target);
        if(right.size()>0){
            right.add(root);
            return right;
        }
        return new ArrayList<>();
    }
    public static int minTime(Node root, int target) 
    {
        // Your code goes here
        
        ArrayList<Node> path=ntrp(root,target);
        if(path==null) return 0;
        int time=0;
        for(int i=0;i<path.size();i++){
            Node node=path.get(i);
            if(i==0){
                time=height(node)-1;
            }else{
                Node cnode=path.get(i-1);
                if(cnode==node.left){
                    time=Math.max(time,i+height(node.right));
                }else{
                    time=Math.max(time,i+height(node.left));
                    
                }
            }
            
        }
        return time;
    }
    private static int height(Node root){
        if(root==null) return 0;
        // 0 node 
        // -1 edge
        return Math.max(height(root.left),height(root.right))+1;
    }
}